using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Audio;

namespace qASIC.AudioManagment
{
    public class AudioManager : MonoBehaviour
    {
        public AudioMixer mixer;

        private static AudioManager singleton;

        private Dictionary<string, AudioChannel> channels = new Dictionary<string, AudioChannel>();

        private void Awake() => AssignSingleton();

        private static void CheckSingleton()
        {
            if (singleton != null) return;
            Console.GameConsoleController.Log("Audio manager does not exist! Instantiating...", "error");
            new GameObject("Audio Manager - autogenerated").AddComponent<AudioManager>().AssignSingleton();
        }

        private void AssignSingleton()
        {
            if (singleton == null)
            {
                singleton = this;
                DontDestroyOnLoad(gameObject);
                return;
            }
            if(singleton != this) Destroy(this);
        }

        private static AudioChannel GetChannel(string name)
        {
            if (singleton.channels.ContainsKey(name))
            {
                if(singleton.channels[name].source == null) singleton.channels[name].source = singleton.gameObject.AddComponent<AudioSource>();
                return singleton.channels[name];
            }

            AudioChannel data = new AudioChannel();
            data.source = singleton.gameObject.AddComponent<AudioSource>();
            return data;
        }

        private static void SetChannel(string name, AudioChannel channel)
        {
            if (singleton.channels.ContainsKey(name))
            {
                singleton.channels[name] = channel;
                return;
            }
            singleton.channels.Add(name, channel);
        }

        public static void Play(string channelName, AudioData data)
        {
            CheckSingleton();
            AudioChannel channel = GetChannel(channelName);
            if (!data.replace && channel.source.isPlaying) return;

            channel.source.clip = data.clip;
            channel.source.loop = data.loop;
            if (singleton.mixer != null) channel.source.outputAudioMixerGroup = data.group;
            channel.source.Play();

            if (channel.destroyEnum != null)
            {
                singleton.StopCoroutine(channel.destroyEnum);
                channel.destroyEnum = null;
            }
            channel.destroyEnum = channel.DestroyOnPlaybackEnd();
            singleton.StartCoroutine(channel.destroyEnum);

            SetChannel(channelName, channel);
        }

        public static void Stop(string channelName)
        {
            CheckSingleton();
            if (!singleton.channels.ContainsKey(channelName)) return;
            AudioChannel channel = singleton.channels[channelName];

            if (channel.source == null) return;
            Destroy(channel.source);
            if(channel.destroyEnum != null) singleton.StopCoroutine(channel.destroyEnum);
            channel = new AudioChannel();

            SetChannel(channelName, channel);
        }

        public static void Pause(string channelName)
        {
            CheckSingleton();
            if (!singleton.channels.ContainsKey(channelName)) return;
            AudioChannel channel = singleton.channels[channelName];

            if (channel.source == null || !channel.source.isPlaying) return;
            channel.source.Pause();

            if (channel.destroyEnum != null)
            {
                singleton.StopCoroutine(channel.destroyEnum);
                channel.destroyEnum = null;
            }

            SetChannel(channelName, channel);
        }

        public static void UnPause(string channelName)
        {
            CheckSingleton();
            if (!singleton.channels.ContainsKey(channelName)) return;
            AudioChannel channel = singleton.channels[channelName];

            if (channel.source == null || channel.source.isPlaying) return;
            channel.source.UnPause();
            channel.destroyEnum = channel.DestroyOnPlaybackEnd();
            singleton.StartCoroutine(channel.destroyEnum);
            SetChannel(channelName, channel);
        }
    }
}