using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Audio;
using qASIC.FileManagement;

namespace qASIC.AudioManagment
{
    public class AudioManager : MonoBehaviour
    {
        public AudioMixer Mixer;
        public bool RoundValue = true;

        [Header("Saving")]
        public TextAsset SaveFilePreset;
        public string UserSavePath = "qASIC/Audio.txt";
        public string EditorUserSavePath = "qASIC/Audio-editor.txt";
        private static string _config = string.Empty;

        public static int ChannelCount 
        {
            get
            {
                if (singleton == null) return 0;
                return singleton.channels.Count;
            }
        }

        #region Singleton
        public static AudioManager singleton;

        private void Awake() => AssignSingleton();

        public static bool Paused = false;

        private static void CheckSingleton()
        {
            if (singleton != null) return;
            qDebug.LogError("Audio manager does not exist! Instantiating...");
            new GameObject("Audio Manager - autogenerated").AddComponent<AudioManager>().AssignSingleton();
        }

        private void AssignSingleton()
        {
            if (singleton == null)
            {
                singleton = this;
                DontDestroyOnLoad(gameObject);
                return;
            }
            if(singleton != this) Destroy(this);
        }
        #endregion

        #region Saving
        private void Start()
        {
            if (singleton == this) LoadSettings();
        }

        public static void LoadSettings()
        {
            CheckSingleton();
            string path = singleton.UserSavePath;
#if UNITY_EDITOR
            path = singleton.EditorUserSavePath;
#endif
            if(singleton.SaveFilePreset != null) ConfigController.Repair($"{Application.persistentDataPath}/{path}", singleton.SaveFilePreset.text);
            if(!FileManager.TryLoadFileWriter($"{Application.persistentDataPath}/{path}", out _config)) return;
            List<string> sets = ConfigController.CreateOptionList(_config);

            for (int i = 0; i < sets.Count; i++)
            {
                string[] values = sets[i].Split(':');
                if (values.Length != 2) continue;
                if (!float.TryParse(values[1], out float result)) continue;
                SetFloat(values[0], result, false);
            }
        }
        #endregion

        #region Parameters
        public static bool GetFloat(string name, out float value)
        {
            CheckSingleton();
            value = 0f;
            if (singleton.Mixer == null) return false;
            return singleton.Mixer.GetFloat(name, out value);
        }

        public static void SetFloat(string name, float value, bool preview = true)
        {
            CheckSingleton();
            if (singleton.Mixer == null || !singleton.Mixer.GetFloat(name, out _))
            {
                if (!preview) qDebug.LogError("Parameter or mixer does not exist! Cannot save or change parameter!");
                return;
            }

            if (singleton.RoundValue) value = Mathf.Round(value);
            singleton.Mixer.SetFloat(name, value);

            if (!preview || string.IsNullOrWhiteSpace(singleton.UserSavePath)) return;

            string path = singleton.UserSavePath;
#if UNITY_EDITOR
            path = singleton.EditorUserSavePath;
#endif
            _config = ConfigController.SetSetting(_config, name, value.ToString());
            qDebug.Log($"Changed parameter <b>{name}</b> to {value}", "settings");
            FileManager.SaveFileWriter($"{Application.persistentDataPath}/{path}", _config);
        }
        #endregion

        #region Channels
        public Dictionary<string, AudioChannel> channels = new Dictionary<string, AudioChannel>();

        public static AudioChannel GetChannel(string name)
        {
            if (singleton.channels.ContainsKey(name))
            {
                if(singleton.channels[name].source == null) singleton.channels[name].source = singleton.gameObject.AddComponent<AudioSource>();
                return singleton.channels[name];
            }

            AudioChannel data = new AudioChannel();
            data.source = singleton.gameObject.AddComponent<AudioSource>();
            return data;
        }

        public static void SetChannel(string name, AudioChannel channel)
        {
            if (singleton.channels.ContainsKey(name))
            {
                singleton.channels[name] = channel;
                return;
            }
            singleton.channels.Add(name, channel);
        }

        static void StartDestroyCoroutine(ref AudioChannel channel)
        {
            if (channel.destroyEnum != null)
            {
                singleton.StopCoroutine(channel.destroyEnum);
                channel.destroyEnum = null;
            }
            channel.destroyEnum = channel.DestroyOnPlaybackEnd();
            singleton.StartCoroutine(channel.destroyEnum);
        }

        static void StopDestroyCoroutine(ref AudioChannel channel)
        {
            if (channel.destroyEnum != null)
            {
                singleton.StopCoroutine(channel.destroyEnum);
                channel.destroyEnum = null;
            }
        }
        #endregion

        #region Play
        public static void Play(string channelName, AudioData data)
        {
            CheckSingleton();
            AudioChannel channel = GetChannel(channelName);
            if (!data.replace && channel.source.isPlaying) return;

            channel.source.clip = data.clip;
            channel.source.loop = data.loop;
            channel.useGlobalControlls = data.UseGlobalControlls;

            if (singleton.Mixer != null) channel.source.outputAudioMixerGroup = data.group;

            channel.source.Play();
            if (!Paused || !channel.useGlobalControlls) StartDestroyCoroutine(ref channel);
            else channel.source.Pause();

            SetChannel(channelName, channel);
        }

        public static void Stop(string channelName)
        {
            CheckSingleton();
            if (!singleton.channels.ContainsKey(channelName)) return;
            AudioChannel channel = singleton.channels[channelName];

            if (channel.source == null) return;
            Destroy(channel.source);
            channel = new AudioChannel();

            SetChannel(channelName, channel);
        }

        public static void StopAll()
        {
            AudioSourceController.OnStopAll.Invoke();

            CheckSingleton();

            Dictionary<string, AudioChannel> temp = new Dictionary<string, AudioChannel>(singleton.channels);
            foreach (var item in temp)
            {
                if (singleton.channels[item.Key].source == null || !singleton.channels[item.Key].useGlobalControlls) continue;
                Destroy(singleton.channels[item.Key].source);
                SetChannel(item.Key, new AudioChannel());
            }
        }

        public static void Pause(string channelName)
        {
            CheckSingleton();
            if (!singleton.channels.ContainsKey(channelName)) return;
            AudioChannel channel = singleton.channels[channelName];

            if (channel.source == null || !channel.source.isPlaying) return;
            channel.source.Pause();
            channel.paused = true;

            StopDestroyCoroutine(ref channel);

            SetChannel(channelName, channel);
        }

        public static void PauseAll()
        {
            AudioSourceController.OnPauseAll.Invoke();

            CheckSingleton();

            Paused = true;
            Dictionary<string, AudioChannel> temp = new Dictionary<string, AudioChannel>(singleton.channels);
            foreach (var item in temp)
            {
                AudioChannel channel = singleton.channels[item.Key];
                if (channel.source == null || !channel.source.isPlaying || !channel.useGlobalControlls) continue;
                channel.source.Pause();

                StopDestroyCoroutine(ref channel);

                SetChannel(item.Key, channel);
            }
        }

        public static void UnPause(string channelName)
        {
            CheckSingleton();
            if (!singleton.channels.ContainsKey(channelName)) return;
            AudioChannel channel = singleton.channels[channelName];

            if (channel.source == null || channel.source.isPlaying) return;
            channel.source.UnPause();
            channel.paused = false;

            StartDestroyCoroutine(ref channel);

            SetChannel(channelName, channel);
        }

        public static void UnPauseAll()
        {
            AudioSourceController.OnUnPauseAll.Invoke();

            CheckSingleton();

            Paused = false;
            Dictionary<string, AudioChannel> temp = new Dictionary<string, AudioChannel>(singleton.channels);
            foreach (var item in temp)
            {
                AudioChannel channel = singleton.channels[item.Key];
                if (channel.source == null || channel.source.isPlaying || channel.paused || !channel.useGlobalControlls) continue;
                channel.source.UnPause();

                StartDestroyCoroutine(ref channel);

                SetChannel(item.Key, channel);
            }
        }
        #endregion
    }
}